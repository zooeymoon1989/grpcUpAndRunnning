// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: my_guest.proto

package my_guest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuestServicesClient is the client API for GuestServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestServicesClient interface {
	Add(ctx context.Context, in *MyGuest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Update(ctx context.Context, in *MyGuest, opts ...grpc.CallOption) (*MyGuest, error)
	Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GuestServices_GetClient, error)
	Delete(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	StreamAdd(ctx context.Context, opts ...grpc.CallOption) (GuestServices_StreamAddClient, error)
}

type guestServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestServicesClient(cc grpc.ClientConnInterface) GuestServicesClient {
	return &guestServicesClient{cc}
}

func (c *guestServicesClient) Add(ctx context.Context, in *MyGuest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/cdp.v1.my_guest.GuestServices/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServicesClient) Update(ctx context.Context, in *MyGuest, opts ...grpc.CallOption) (*MyGuest, error) {
	out := new(MyGuest)
	err := c.cc.Invoke(ctx, "/cdp.v1.my_guest.GuestServices/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServicesClient) Get(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GuestServices_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuestServices_ServiceDesc.Streams[0], "/cdp.v1.my_guest.GuestServices/get", opts...)
	if err != nil {
		return nil, err
	}
	x := &guestServicesGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuestServices_GetClient interface {
	Recv() (*MyGuest, error)
	grpc.ClientStream
}

type guestServicesGetClient struct {
	grpc.ClientStream
}

func (x *guestServicesGetClient) Recv() (*MyGuest, error) {
	m := new(MyGuest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guestServicesClient) Delete(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/cdp.v1.my_guest.GuestServices/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestServicesClient) StreamAdd(ctx context.Context, opts ...grpc.CallOption) (GuestServices_StreamAddClient, error) {
	stream, err := c.cc.NewStream(ctx, &GuestServices_ServiceDesc.Streams[1], "/cdp.v1.my_guest.GuestServices/streamAdd", opts...)
	if err != nil {
		return nil, err
	}
	x := &guestServicesStreamAddClient{stream}
	return x, nil
}

type GuestServices_StreamAddClient interface {
	Send(*MyGuest) error
	Recv() (*MyGuest, error)
	grpc.ClientStream
}

type guestServicesStreamAddClient struct {
	grpc.ClientStream
}

func (x *guestServicesStreamAddClient) Send(m *MyGuest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *guestServicesStreamAddClient) Recv() (*MyGuest, error) {
	m := new(MyGuest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuestServicesServer is the server API for GuestServices service.
// All implementations must embed UnimplementedGuestServicesServer
// for forward compatibility
type GuestServicesServer interface {
	Add(context.Context, *MyGuest) (*wrapperspb.BoolValue, error)
	Update(context.Context, *MyGuest) (*MyGuest, error)
	Get(*emptypb.Empty, GuestServices_GetServer) error
	Delete(context.Context, *wrapperspb.Int64Value) (*wrapperspb.BoolValue, error)
	StreamAdd(GuestServices_StreamAddServer) error
	mustEmbedUnimplementedGuestServicesServer()
}

// UnimplementedGuestServicesServer must be embedded to have forward compatible implementations.
type UnimplementedGuestServicesServer struct {
}

func (UnimplementedGuestServicesServer) Add(context.Context, *MyGuest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedGuestServicesServer) Update(context.Context, *MyGuest) (*MyGuest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGuestServicesServer) Get(*emptypb.Empty, GuestServices_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGuestServicesServer) Delete(context.Context, *wrapperspb.Int64Value) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGuestServicesServer) StreamAdd(GuestServices_StreamAddServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAdd not implemented")
}
func (UnimplementedGuestServicesServer) mustEmbedUnimplementedGuestServicesServer() {}

// UnsafeGuestServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestServicesServer will
// result in compilation errors.
type UnsafeGuestServicesServer interface {
	mustEmbedUnimplementedGuestServicesServer()
}

func RegisterGuestServicesServer(s grpc.ServiceRegistrar, srv GuestServicesServer) {
	s.RegisterService(&GuestServices_ServiceDesc, srv)
}

func _GuestServices_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyGuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServicesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdp.v1.my_guest.GuestServices/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServicesServer).Add(ctx, req.(*MyGuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyGuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdp.v1.my_guest.GuestServices/update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServicesServer).Update(ctx, req.(*MyGuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestServices_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuestServicesServer).Get(m, &guestServicesGetServer{stream})
}

type GuestServices_GetServer interface {
	Send(*MyGuest) error
	grpc.ServerStream
}

type guestServicesGetServer struct {
	grpc.ServerStream
}

func (x *guestServicesGetServer) Send(m *MyGuest) error {
	return x.ServerStream.SendMsg(m)
}

func _GuestServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdp.v1.my_guest.GuestServices/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServicesServer).Delete(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuestServices_StreamAdd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GuestServicesServer).StreamAdd(&guestServicesStreamAddServer{stream})
}

type GuestServices_StreamAddServer interface {
	Send(*MyGuest) error
	Recv() (*MyGuest, error)
	grpc.ServerStream
}

type guestServicesStreamAddServer struct {
	grpc.ServerStream
}

func (x *guestServicesStreamAddServer) Send(m *MyGuest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *guestServicesStreamAddServer) Recv() (*MyGuest, error) {
	m := new(MyGuest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GuestServices_ServiceDesc is the grpc.ServiceDesc for GuestServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuestServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cdp.v1.my_guest.GuestServices",
	HandlerType: (*GuestServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _GuestServices_Add_Handler,
		},
		{
			MethodName: "update",
			Handler:    _GuestServices_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _GuestServices_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get",
			Handler:       _GuestServices_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamAdd",
			Handler:       _GuestServices_StreamAdd_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "my_guest.proto",
}
